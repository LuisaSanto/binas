package org.binas.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;

import example.ws.handler.KerberosClientHandler;
import org.binas.ws.AlreadyHasBina_Exception;
import org.binas.ws.BadInit_Exception;
import org.binas.ws.BinasPortType;
import org.binas.ws.BinasService;
import org.binas.ws.CoordinatesView;
import org.binas.ws.EmailExists_Exception;
import org.binas.ws.FullStation_Exception;
import org.binas.ws.InvalidEmail_Exception;
import org.binas.ws.InvalidStation_Exception;
import org.binas.ws.NoBinaAvail_Exception;
import org.binas.ws.NoBinaRented_Exception;
import org.binas.ws.NoCredit_Exception;
import org.binas.ws.StationView;
import org.binas.ws.UserNotExists_Exception;
import org.binas.ws.UserView;

import pt.ulisboa.tecnico.sdis.kerby.CipheredView;
import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class BinasClient implements BinasPortType {

    private static CipheredView ticket = null;
    private static CipheredView auth;


    /** WS service */
    BinasService service = null;

    /** WS port (port type is the interface, port is the implementation) */
    BinasPortType port = null;

    /** The BindingProvider interface defines accessor methods for the request and response context maps */
    BindingProvider bindingProvider = null;

    Map<String, Object> requestContext = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    public String getWsURL() {
        return wsURL;
    }

    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public BinasClient(String wsURL) throws BinasClientException {
        this.wsURL = wsURL;
        createStub();
    }

    /** constructor with provided UDDI location and name */
    public BinasClient(String uddiURL, String wsName) throws BinasClientException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();

    }

    /** verifica se cliente est√° autenticado */
    private boolean isAuthenticatedToKerby(){
        return ticket != null;
    }

    /** if not authenticated, add property to message context to require authentication with kerby */
    private void guaranteeAuthenticationToKerby(){
        if(!isAuthenticatedToKerby()){
            requestContext.put(KerberosClientHandler.REQUIRE_AUTHENTICATION_PROPERTY, true);
            requestContext.put(KerberosClientHandler.ENDPOINT_ADDRESS_PROPERTY, wsURL);
        }
    }


    /** UDDI lookup */
    private void uddiLookup() throws BinasClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new BinasClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new BinasClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");

        service = new BinasService();
        port = service.getBinasPort();

        if (wsURL != null) {
            if (verbose){
                System.out.println("Setting endpoint address ...");
            }

            bindingProvider = (BindingProvider) port;
            requestContext = bindingProvider.getRequestContext();
            requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
        }
    }

	@Override
	public UserView activateUser(String email) throws EmailExists_Exception, InvalidEmail_Exception {
        guaranteeAuthenticationToKerby();
		return port.activateUser(email);
	}

	@Override
	public StationView getInfoStation(String stationId) throws InvalidStation_Exception {
        guaranteeAuthenticationToKerby();
        return port.getInfoStation(stationId);
	}

	@Override
	public List<StationView> listStations(Integer numberOfStations, CoordinatesView coordinates) {
        guaranteeAuthenticationToKerby();
        return port.listStations(numberOfStations,coordinates);
	}

	@Override
	public void rentBina(String stationId, String email) throws AlreadyHasBina_Exception, InvalidStation_Exception,
			NoBinaAvail_Exception, NoCredit_Exception, UserNotExists_Exception {
        guaranteeAuthenticationToKerby();
        port.rentBina(stationId,email);
	}

	@Override
	public void returnBina(String stationId, String email)
			throws FullStation_Exception, InvalidStation_Exception, NoBinaRented_Exception, UserNotExists_Exception {
        guaranteeAuthenticationToKerby();
        port.returnBina(stationId,email);
	}

	@Override
	public int getCredit(String email) throws UserNotExists_Exception {
        guaranteeAuthenticationToKerby();
        return port.getCredit(email);
	}

    @Override
    public void setCredit(String email, Integer credit) throws UserNotExists_Exception{
        guaranteeAuthenticationToKerby();
        port.setCredit(email, credit);
    }

    @Override
	public String testPing(String inputMessage) {
        guaranteeAuthenticationToKerby();
        return port.testPing(inputMessage);
	}

	@Override
	public void testClear() {
        guaranteeAuthenticationToKerby();
        port.testClear();
	}

	@Override
	public void testInitStation(String stationId, int x, int y, int capacity, int returnPrize)
			throws BadInit_Exception {
        guaranteeAuthenticationToKerby();
        port.testInitStation(stationId, x, y, capacity, returnPrize);
	}

	@Override
	public void testInit(int userInitialPoints) throws BadInit_Exception {
        guaranteeAuthenticationToKerby();
        port.testInit(userInitialPoints);
	}
}   